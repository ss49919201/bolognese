# ポモドーロタイマーWebアプリ用のClineルール

# アプリケーションモジュール
module アプリ
module タイマー
module 設定
module 統計

# データモデル
model タイマー {
  状態: enum(待機中, 実行中, 一時停止, 休憩中)
  セッション数: int
  残り時間: int
  合計時間: int
  タイプ: enum(ポモドーロ, 短い休憩, 長い休憩)
}

model 設定 {
  ポモドーロ時間: int = 25
  短い休憩時間: int = 5
  長い休憩時間: int = 15
  長い休憩までのセット数: int = 4
  休憩の自動開始: boolean = false
  ポモドーロの自動開始: boolean = false
  アラーム音: enum(ベル, デジタル, 優しい音) = ベル
  アラーム音量: int = 70
  通知: boolean = true
}

model 統計 {
  完了したポモドーロ数: int
  総集中時間: int
  日別統計: map<date, 日別記録>
}

model 日別記録 {
  日付: date
  完了したポモドーロ数: int
  総集中時間: int
}

# APIエンドポイント
api タイマーコントローラー {
  タイマー開始(): タイマー
  タイマー一時停止(): タイマー
  タイマー再開(): タイマー
  タイマーリセット(): タイマー
  次へスキップ(): タイマー
  現在の状態取得(): タイマー
}

api 設定コントローラー {
  設定取得(): 設定
  設定更新(設定オブジェクト: 設定): 設定
}

api 統計コントローラー {
  統計取得(): 統計
  日別統計取得(日付: date): 日別記録
  統計リセット(): 統計
}

# UIコンポーネント
component ポモドーロタイマー {
  props {
    タイマー: タイマー
    開始時: function
    一時停止時: function
    リセット時: function
    スキップ時: function
  }
}

component タイマー表示 {
  props {
    分: int
    秒: int
    タイプ: enum(ポモドーロ, 短い休憩, 長い休憩)
  }
}

component 設定パネル {
  props {
    設定: 設定
    設定変更時: function
  }
}

component 統計ビュー {
  props {
    統計: 統計
  }
}

# イベント
event タイマー開始イベント {
  タイマータイプ: enum(ポモドーロ, 短い休憩, 長い休憩)
  持続時間: int
}

event タイマー完了イベント {
  タイマータイプ: enum(ポモドーロ, 短い休憩, 長い休憩)
  持続時間: int
}

event 設定更新イベント {
  設定オブジェクト: 設定
}

# バリデーター
validator タイマーバリデーター {
  validate(タイマー: タイマー) {
    require(タイマー.残り時間 >= 0, "残り時間はマイナスにできません")
    require(タイマー.合計時間 > 0, "合計時間は正の値である必要があります")
  }
}

validator 設定バリデーター {
  validate(設定オブジェクト: 設定) {
    require(設定オブジェクト.ポモドーロ時間 > 0, "ポモドーロ時間は正の値である必要があります")
    require(設定オブジェクト.短い休憩時間 > 0, "短い休憩時間は正の値である必要があります")
    require(設定オブジェクト.長い休憩時間 > 0, "長い休憩時間は正の値である必要があります")
    require(設定オブジェクト.長い休憩までのセット数 > 0, "長い休憩までのインターバルは正の値である必要があります")
    require(設定オブジェクト.アラーム音量 >= 0 && 設定オブジェクト.アラーム音量 <= 100, "音量は0から100の間である必要があります")
  }
}

# ワークフロー
workflow タイマーワークフロー {
  start {
    transition to 待機中
  }
  
  待機中 {
    on タイマー開始 transition to 実行中
  }
  
  実行中 {
    on タイマー一時停止 transition to 一時停止
    on 時間切れ transition to 休憩中
  }
  
  一時停止 {
    on タイマー再開 transition to 実行中
    on タイマーリセット transition to 待機中
  }
  
  休憩中 {
    on タイマー開始 transition to 実行中
    on 時間切れ transition to 待機中
  }
}

# ポモドーロタイマーWebアプリ コーディングガイドライン

## 1. 全般的なコーディング規約

### 1.1 命名規則
- **変数名**: キャメルケース（例: `timerStatus`, `breakDuration`）
- **定数**: 大文字のスネークケース（例: `DEFAULT_POMODORO_TIME`, `MAX_SESSIONS`）
- **クラス/コンポーネント**: パスカルケース（例: `TimerDisplay`, `SettingsManager`）
- **関数/メソッド**: キャメルケース（例: `startTimer()`, `updateSettings()`）
- **ファイル名**: モジュールを表すパスカルケース（例: `TimerController.js`, `SettingsPanel.vue`）

### 1.2 コメント
- 複雑なロジックには必ずコメントを追加する
- JSDoc形式のコメントを使用して関数の入出力を明示する

### 1.3 エラー処理
- すべての非同期処理には適切なエラーハンドリングを実装する
- ユーザーに表示するエラーメッセージは分かりやすく、解決策を示唆する内容にする
- デバッグ情報はコンソールに出力する

## 2. フロントエンド開発ガイドライン

### 2.1 コンポーネント設計
- 単一責任の原則に従い、各コンポーネントは一つの役割のみを持つ
- 再利用可能なコンポーネントは共通コンポーネントとして切り出す
- Propsの型定義を明確にする
- 状態管理はストアを使用し、コンポーネント間の直接的な結合を避ける

### 2.2 UI/UXガイドライン
- レスポンシブデザインを採用し、モバイルファーストの設計にする
- タイマー表示は視認性を最優先し、大きく見やすいフォントを使用する
- ユーザーアクションに対しては必ず視覚的なフィードバックを提供する

### 2.3 パフォーマンス最適化
- 不必要なレンダリングを避けるためにメモ化を活用する
- 画像やアセットは適切に最適化する
- バンドルサイズを最小限に保つためにコード分割を実装する
- アニメーションはCSSを優先し、JavaScriptアニメーションはパフォーマンスに注意する

## 3. バックエンド開発ガイドライン

### 3.1 APIデザイン
- RESTful原則に従ったAPI設計を行う
- エンドポイントはリソース指向で命名する
- バージョニングを適切に実装する（例: `/api/v1/timer`）
- レスポンスフォーマットは一貫性を保つ（JSONを標準とする）

### 3.2 データ管理
- ユーザーデータは適切に暗号化して保存する
- 統計データのバックアップメカニズムを実装する
- 長期的な統計分析のためのデータ集計処理を効率化する
- クライアント側のデータキャッシュ戦略を明確にする

### 3.3 セキュリティ
- すべてのユーザー入力に対してバリデーションを実装する
- CSRF対策を実装する
- XSS対策を実装する
- SQLインジェクション対策を実装する
- 認証・認可のベストプラクティスに従う

## 4. テストガイドライン

### 4.1 単体テスト
- すべての重要なロジックに対して単体テストを作成する
- モックを適切に使用して外部依存を分離する
- エッジケースを考慮したテストケースを作成する
- テストカバレッジは最低80%を目標とする

### 4.2 統合テスト
- 主要なユーザーフローに対して統合テストを実装する
- タイマーの状態遷移テストを重点的に行う
- 設定変更が正しく反映されるかのテストを実装する

### 4.3 E2Eテスト
- 主要なユースケースに対してE2Eテストを実装する
- 異なるデバイスやブラウザでのテストを自動化する
- パフォーマンステストを定期的に実行する

### テストライブラリ

- Vitestを利用する

## 5. 特定機能の実装ガイドライン

### 5.1 タイマー実装
- setIntervalではなく、requestAnimationFrameを使用して正確なタイマーを実装する
- バックグラウンドタブでも正確に動作するようにするため、最後のタイムスタンプを保存する
- タイマーの状態変更はイベント駆動型で実装する

### 5.2 通知システム
- ブラウザの通知APIを使用し、適切なフォールバックを実装する
- 通知の許可状態を保存し、必要に応じて再要求する
- 通知の頻度と内容をユーザーが設定できるようにする

### 5.3 統計管理
- 完了したポモドーロの集計は信頼性を確保するためサーバー側で行う
- ローカルストレージとサーバーの同期メカニズムを実装する
- データ可視化はシンプルで理解しやすいグラフを使用する

## 6. デプロイメントとCI/CD

### 6.1 ビルドプロセス
- 環境ごとに適切な設定ファイルを用意する
- ビルド時の最適化を徹底する
- ソースマップは開発環境のみに含める

### 6.2 継続的インテグレーション
- すべてのPRに対して自動テストを実行する
- コードスタイルチェックを自動化する
- セキュリティスキャンを継続的に実行する

### 6.3 デプロイメント
- カナリアリリースを実装して段階的にデプロイする
- ロールバック手順を明確に文書化する
- デプロイ後の自動監視を設定する

## 7. ドキュメント要件

### 7.1 コード文書化
- 主要なクラスと関数には適切なドキュメントコメントを記載する
- 状態管理とデータフローの図を用意する
- 設計上の重要な決定事項を記録する

### 7.2 ユーザードキュメント
- 基本的な使い方ガイドを作成する
- よくある質問（FAQ）セクションを用意する
- ポモドーロテクニックの効果的な活用方法を紹介する
