# ポモドーロタイマーWebアプリ用のClineルール

# アプリケーションモジュール
module アプリ
module タイマー
module 設定
module 統計

# データモデル
model タイマー {
  状態: enum(待機中, 実行中, 一時停止, 休憩中)
  セッション数: int
  残り時間: int
  合計時間: int
  タイプ: enum(ポモドーロ, 短い休憩, 長い休憩)
}

model 設定 {
  ポモドーロ時間: int = 25
  短い休憩時間: int = 5
  長い休憩時間: int = 15
  長い休憩までのセット数: int = 4
  休憩の自動開始: boolean = false
  ポモドーロの自動開始: boolean = false
  アラーム音: enum(ベル, デジタル, 優しい音) = ベル
  アラーム音量: int = 70
  通知: boolean = true
}

model 統計 {
  完了したポモドーロ数: int
  総集中時間: int
  日別統計: map<date, 日別記録>
}

model 日別記録 {
  日付: date
  完了したポモドーロ数: int
  総集中時間: int
}

# APIエンドポイント
api タイマーコントローラー {
  タイマー開始(): タイマー
  タイマー一時停止(): タイマー
  タイマー再開(): タイマー
  タイマーリセット(): タイマー
  次へスキップ(): タイマー
  現在の状態取得(): タイマー
}

api 設定コントローラー {
  設定取得(): 設定
  設定更新(設定オブジェクト: 設定): 設定
}

api 統計コントローラー {
  統計取得(): 統計
  日別統計取得(日付: date): 日別記録
  統計リセット(): 統計
}

# UIコンポーネント
component ポモドーロタイマー {
  props {
    タイマー: タイマー
    開始時: function
    一時停止時: function
    リセット時: function
    スキップ時: function
  }
}

component タイマー表示 {
  props {
    分: int
    秒: int
    タイプ: enum(ポモドーロ, 短い休憩, 長い休憩)
  }
}

component 設定パネル {
  props {
    設定: 設定
    設定変更時: function
  }
}

component 統計ビュー {
  props {
    統計: 統計
  }
}

# イベント
event タイマー開始イベント {
  タイマータイプ: enum(ポモドーロ, 短い休憩, 長い休憩)
  持続時間: int
}

event タイマー完了イベント {
  タイマータイプ: enum(ポモドーロ, 短い休憩, 長い休憩)
  持続時間: int
}

event 設定更新イベント {
  設定オブジェクト: 設定
}

# バリデーター
validator タイマーバリデーター {
  validate(タイマー: タイマー) {
    require(タイマー.残り時間 >= 0, "残り時間はマイナスにできません")
    require(タイマー.合計時間 > 0, "合計時間は正の値である必要があります")
  }
}

validator 設定バリデーター {
  validate(設定オブジェクト: 設定) {
    require(設定オブジェクト.ポモドーロ時間 > 0, "ポモドーロ時間は正の値である必要があります")
    require(設定オブジェクト.短い休憩時間 > 0, "短い休憩時間は正の値である必要があります")
    require(設定オブジェクト.長い休憩時間 > 0, "長い休憩時間は正の値である必要があります")
    require(設定オブジェクト.長い休憩までのセット数 > 0, "長い休憩までのインターバルは正の値である必要があります")
    require(設定オブジェクト.アラーム音量 >= 0 && 設定オブジェクト.アラーム音量 <= 100, "音量は0から100の間である必要があります")
  }
}

# ワークフロー
workflow タイマーワークフロー {
  start {
    transition to 待機中
  }
  
  待機中 {
    on タイマー開始 transition to 実行中
  }
  
  実行中 {
    on タイマー一時停止 transition to 一時停止
    on 時間切れ transition to 休憩中
  }
  
  一時停止 {
    on タイマー再開 transition to 実行中
    on タイマーリセット transition to 待機中
  }
  
  休憩中 {
    on タイマー開始 transition to 実行中
    on 時間切れ transition to 待機中
  }
}
